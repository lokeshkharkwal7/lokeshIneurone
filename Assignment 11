1. Create an assert statement that throws an AssertionError if the variable spam is a negative integer.
   assert spam >= 0, "Variable 'spam' is a negative integer."

2. Write an assert statement that triggers an AssertionError if the variables eggs and bacon contain strings that are the same as each other, even if their cases are different (that is, 'hello' and 'hello' are considered the same, and 'goodbye' and 'GOODbye' are also considered the same).
   assert eggs.lower() != bacon.lower(), "Variables 'eggs' and 'bacon' should not have the same case-insensitive value."

3. Create an assert statement that throws an AssertionError every time.
   assert False, "This assert statement always triggers an AssertionError."

4. What are the two lines that must be present in your software in order to call logging.debug()?
   import logging
   logging.basicConfig(level=logging.DEBUG)

5. What are the two lines that your program must have in order to have logging.debug() send a logging message to a file named programLog.txt?
   import logging
   logging.basicConfig(filename='programLog.txt', level=logging.DEBUG)

6. What are the five levels of logging?
   - DEBUG, INFO, WARNING, ERROR, CRITICAL

7. What line of code would you add to your software to disable all logging messages?
   logging.disable(logging.CRITICAL)

8. Why is using logging messages better than using print() to display the same message?
   - Using logging allows for different log levels, better formatting, and the ability to redirect logs to different outputs.

9. What are the differences between the Step Over, Step In, and Step Out buttons in the debugger?
   - Step Over: Executes the current line and stops at the next line.
   - Step In: Jumps into the called function and stops at the first line of that function.
   - Step Out: Continues execution until the current function returns.

10. After you click Continue, when will the debugger stop?
    - The debugger will stop when it encounters another breakpoint or when the program completes its execution.

11. What is the concept of a breakpoint?
    - A breakpoint is a specified point in the code where the debugger will temporarily pause execution, allowing the developer to inspect variables, evaluate expressions, and control the flow of the program during debugging.
